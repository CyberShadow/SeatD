/*  SEATD - Semantics Aware Tools for D
 *  Copyright (c) 2007-2008 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0, see license.txt
 */

TemplateDeclaration(ScopeSymbol parent, SymbolAttribute attrs)
{
    "template" Identifier "(" TemplateParameterListOpt ")"
    "{" DeclDefsOpt "}"
    {
        string name;
        Identifier(name);

        SymbolAttribute body_attrs;
        DeclDefsOpt(parent, body_attrs);
    }
}

TemplateParameterListOpt() no_ast
{
    TemplateParameterList;
    epsilon;
}

TemplateParameterList() no_ast
{
    TemplateParameterList "," TemplateParameter;
    TemplateParameter;
}

TemplateParameter() no_ast
{
    TemplateAliasParameter;
    TemplateTupleParameter;
    TemplateValueParameter;
    TemplateTypeParameter;
}

TemplateTypeParameter() no_ast
{
    Identifier TemplateTypeParameterSpecializationOpt TemplateTypeParameterDefaultOpt;
}

TemplateTypeParameterSpecializationOpt() no_ast
{
    ":" TypeNT;
    epsilon;
}

TemplateTypeParameterDefaultOpt() no_ast
{
    "=" TypeNT;
    epsilon;
}

TemplateValueParameter() no_ast
{
    BasicType Declarator TemplateValueParameterSpecializationOpt TemplateValueParameterDefaultOpt;
}

TemplateValueParameterSpecializationOpt() no_ast
{
    ":" ConditionalExpression;
    epsilon;
}

TemplateValueParameterDefaultOpt() no_ast
{
    "=" ConditionalExpression;
    epsilon;
}

TemplateAliasParameter() no_ast
{
    "alias" Identifier TemplateAliasParameterSpecializationOpt TemplateAliasParameterDefaultOpt;
}

TemplateAliasParameterSpecializationOpt() no_ast
{
    ":" TypeNT;
    epsilon;
}

TemplateAliasParameterDefaultOpt() no_ast
{
    "=" TypeNT;
    epsilon;
}

TemplateTupleParameter() no_ast
{
    Identifier "...";
}

ClassTemplateDeclaration(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node)
{
    "class"
    Identifier "(" TemplateParameterListOpt ")"
    BaseClassListOpt
    ClassBody
    {
        string name;
        Identifier(name);

        BaseDeclaration[] base_list;
        BaseClassListOpt(base_list);
        auto classdecl = new ClassDeclaration(
            name, base_list,
            Location(parent.findModule, _ST_line_number, _ST_column_number),
            decl_def_node
        );
        parent ~= classdecl;
        SymbolAttribute body_attrs;
        ClassBody(classdecl, attrs);
    }
}

InterfaceTemplateDeclaration(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node)
{
    "interface"
    Identifier "(" TemplateParameterListOpt ")"
    SuperInterfaceListOpt
    InterfaceBody
    {
        string name;
        Identifier(name);

        auto ifacedecl = new InterfaceDeclaration(
            name,
            Location(parent.findModule, _ST_line_number, _ST_column_number),
            decl_def_node
        );
        parent ~= ifacedecl;
        SymbolAttribute body_attrs;
        InterfaceBody(ifacedecl, attrs);
    }
}

StructTemplateDeclaration(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node)
{
    "struct"
    Identifier "(" TemplateParameterListOpt ")"
    StructBody
    {
        string name;
        Identifier(name);

        auto structdecl = new StructDeclaration(
            name,
            Location(parent.findModule, _ST_line_number, _ST_column_number),
            decl_def_node
        );
        parent ~= structdecl;
        SymbolAttribute body_attrs;
        StructBody(structdecl, body_attrs);
    }
}

FunctionTemplateDeclaration(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node)
{
    APDNode {
        FunctionDeclaration func_decl;
    }

    TypeIdent "(" TemplateParameterList ")" "(" ParameterListOpt ")" FunctionBody
    {
        Type    type;
        string  ident;
        TypeIdent(type, ident);

        func_decl = new FunctionDeclaration(
            type, ident,
            Location(parent.findModule, _ST_line_number, _ST_column_number),
            decl_def_node
        );
        parent ~= func_decl;
    }
    pass(symStmt) { FunctionBody(parent, func_decl); }
}

// used to avoid a s/r conflict of Type and Declarator
TypeIdent(out Type type, out string ident)
{
    BasicType Identifier
    {
        BasicType(type);
        Identifier(ident);
    }

    TypeNT Identifier
    {
        TypeNT(type);
        Identifier(ident);
    }
}

/**************************************************************************************************
    Template Instances
**************************************************************************************************/
TemplateInstance(out string id)
{
    Identifier=TemplateIdentifer "!" "(" TemplateArgumentListOpt ")"
    { TemplateIdentifer(id); }
}

TemplateArgumentListOpt() no_ast
{
    TemplateArgumentList;
    epsilon;
}

TemplateArgumentList() no_ast
{
    TemplateArgumentList "," TemplateArgument;
    TemplateArgument;
}

TemplateArgument() no_ast
{
    TypeNT;
    AssignExpression;
    Identifier=Symbol;
}


/**************************************************************************************************
    Template Mixins
**************************************************************************************************/
TemplateMixin() no_ast
{
    "mixin" Identifier TemplateMixin2 IdentifierOpt ";";
}

TemplateMixin2() no_ast
{
    "!" "(" TemplateArgumentListOpt ")";
    epsilon;
}
