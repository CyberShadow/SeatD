/*  SEATD - Semantics Aware Tools for D
 *  Copyright (c) 2007 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0, see license.txt
 */

/**************************************************************************************************
    Mixin declaration
**************************************************************************************************/
MixinDeclaration() no_ast
{
    "mixin" "(" Expression ")" ";";
}

/**************************************************************************************************
    Declarations
**************************************************************************************************/
Declaration(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node)
{
    TypedefAlias Declaration2
    { Declaration2(parent, attrs, decl_def_node); }

    TypedefAlias Attributes Declaration2
    { Attributes(attrs); Declaration2(parent, attrs, decl_def_node); }

    TypedefAlias Attributes Identifier "=" AssignExpression ";"
    { Attributes(attrs); }

    Attributes Declaration2 force(Declaration)
    { Attributes(attrs); Declaration2(parent, attrs, decl_def_node); }

    Attributes IdentifierSimpleInitializerList ";"
    { Attributes(attrs); }

    Declaration2
    { Declaration2(parent, attrs, decl_def_node); }
}

TypedefAlias()
{
    "typedef";
    "alias";
}

// TODO: prefer declaration on expressionstatement conflict
Declaration2(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node)
{
    BasicType Declarator FunctionBody
    {
        Type type;
        BasicType(type);

        string ident;
        Declarator(type, ident);

        auto fd = new FunctionDeclaration(
            type, ident,
            Location(parent.findModule, _ST_line_number, _ST_column_number),
            decl_def_node
        );
        parent ~= fd;
        FunctionBody(fd);
    }

    BasicType Declarators ";"
    {
        Type type;
        BasicType(type);

        string[] identlist;
        Declarators(type, identlist);

        foreach ( id; identlist )
        {
            parent ~= new Declaration(
                type, id,
                Location(parent.findModule, _ST_line_number, _ST_column_number),
                decl_def_node
            );
        }
    }
}

IdentifierSimpleInitializerList(ScopeSymbol parent, SymbolAttribute attrs)
{
    IdentifierSimpleInitializerList "," Identifier "=" AssignExpression
    {
        IdentifierSimpleInitializerList(parent, attrs);
        string name;
        Identifier(name);
    }

    Identifier "=" AssignExpression
    {
        string name;
        Identifier(name);
    }
}

Declarators(ref Type type, ref string[] idents)
{
    DeclaratorInitializer
    {
        string ident;
        DeclaratorInitializer(type, ident);
        idents ~= ident;
    }

    DeclaratorInitializer "," IdentifierInitializerList
    {
        string ident;
        DeclaratorInitializer(type, ident);
        idents ~= ident;
        IdentifierInitializerList(idents);
    }
}

DeclaratorInitializer(ref Type type, out string ident)
{
    Declarator
    { Declarator(type, ident); }

    Declarator "=" Initializer
    { Declarator(type, ident); }
}

IdentifierInitializerList(ref string[] idents)
{
    IdentifierInitializerList "," IdentifierInitializer
    {
        IdentifierInitializerList(idents);
        string ident;
        IdentifierInitializer(ident);
        idents ~= ident;
    }

    IdentifierInitializer
    {
        string ident;
        IdentifierInitializer(ident);
        idents ~= ident;
    }
}

IdentifierInitializer(out string ident)
{
    Identifier
    { Identifier(ident); }

    Identifier "=" Initializer
    { Identifier(ident); }
}

BasicType(out Type type)
{
    BasicTypeNoIdList
    { BasicTypeNoIdList(type); }

    "." IdentifierList
    {
        string[] idlist;
        IdentifierList(idlist);
        type = new TypeIdentifier(idlist);
    }

    IdentifierList
    {
        string[] idlist;
        IdentifierList(idlist);
        type = new TypeIdentifier(idlist);
    }
}

BasicTypeNoIdList(out Type type)
{
    "bool"
    { type = Type(TY.Tbool); }

    "byte"
    { type = Type(TY.Tint8); }

    "ubyte"
    { type = Type(TY.Tuint8); }

    "short"
    { type = Type(TY.Tint16); }

    "ushort"
    { type = Type(TY.Tuint16); }

    "int"
    { type = Type(TY.Tint32); }

    "uint"
    { type = Type(TY.Tuint32); }

    "long"
    { type = Type(TY.Tint64); }

    "ulong"
    { type = Type(TY.Tuint64); }

    "char"
    { type = Type(TY.Tint8); }

    "wchar"
    { type = Type(TY.Tint16); }

    "dchar"
    { type = Type(TY.Tint32); }

    "float"
    { type = Type(TY.Tfloat32); }

    "double"
    { type = Type(TY.Tfloat64); }

    "real"
    {
        version(X86_64) type = Type(TY.Tfloat128);
        version(X86)    type = Type(TY.Tfloat80);
    }

    "ifloat"
    { type = Type(TY.Timaginary32); }

    "idouble"
    { type = Type(TY.Timaginary64); }

    "ireal"
    {
        version(X86_64) type = Type(TY.Timaginary128);
        version(X86)    type = Type(TY.Timaginary80);
    }

    "cfloat"
    { type = Type(TY.Tcomplex32); }

    "cdouble"
    { type = Type(TY.Tcomplex64); }

    "creal"
    {
        version(X86_64) type = Type(TY.Tcomplex128);
        version(X86)    type = Type(TY.Tcomplex80);
    }

    "void"
    { type = Type(TY.Tvoid); }

    Typeof;

    Typeof IdentifierList;

    TypeConstructor "(" TypeNT ")";
}

BasicType2(ref Type type)
{
    "*"
    { type = Type(TY.Tpointer, type); }

    "[" "]"
    { type = Type(TY.Tdynamic_array, type); }

    "[" Expression "]";

    "[" TypeNT "]"
    {
        Type key_type;
        TypeNT(key_type);
        type = new TypeAssocArray(key_type, type);
    }

    "[" AssignExpression ".." AssignExpression=AE2 "]";

    "delegate" Parameters
    {
        Type[] type_list;
        Parameters(type_list);
        type = new TypeDelegate(type, type_list);
    }

    "function" Parameters
    {
        Type[] type_list;
        Parameters(type_list);
        type = new TypeFunction(type, type_list);
    }
}

TypeConstructor() no_ast
{
    "const";
    "invariant";
}

Declarator(ref Type type, out string ident)
{
    BasicType2 DeclaratorOpt
    {
        BasicType2(type);
        DeclaratorOpt(type, ident);
    }

    Identifier DeclaratorSuffixesOpt
    {
        Identifier(ident);
        DeclaratorSuffixesOpt(type);
    }

    "(" Declarator ")" DeclaratorSuffixesOpt
    {
        Declarator(type, ident);
        DeclaratorSuffixesOpt(type);
    }
}

DeclaratorOpt(ref Type type, out string ident)
{
    Declarator
    { Declarator(type, ident); }

    epsilon prefer(TypeNT);
}

DeclaratorSuffixesOpt(ref Type type)
{
    DeclaratorSuffixesOpt DeclaratorSuffix
    {
        DeclaratorSuffixesOpt(type);
        DeclaratorSuffix(type);
    }

    epsilon prefer(TypeIdent);
}

DeclaratorSuffix(ref Type type)
{
    "[" "]"
    { type = Type(TY.Tdynamic_array, type); }

    "[" Expression "]";

    "[" TypeNT "]"
    {
        Type key_type;
        TypeNT(key_type);
        type = new TypeAssocArray(key_type, type);
    }

    Parameters
    {
        Type[] type_list;
        Parameters(type_list);
        type = new TypeFunction(type, type_list);
    }
}

IdentifierList(ref string[] idlist)
{
    Identifier
    { string tmp; Identifier(tmp); idlist ~= tmp; }

    IdentifierList "." Identifier
    { IdentifierList(idlist); string tmp; Identifier(tmp); idlist ~= tmp; }

    TemplateInstance
    { string tmp; TemplateInstance(tmp); idlist ~= tmp; }

    IdentifierList "." TemplateInstance
    { IdentifierList(idlist); string tmp; TemplateInstance(tmp); idlist ~= tmp; }
}

Typeof() no_ast
{
    "typeof" "(" Expression ")";
}

TypeNT(out Type type)
{
    Constness TypeNT;

    BasicType deny(regexp("[a-zA-Z_][_a-zA-Z0-9]*"))
    { BasicType(type); }

    BasicType Declarator2
    {
        BasicType(type);
        Declarator2(type);
    }
}

TypeOpt(out Type type)
{
    TypeNT
    { TypeNT(type); }

    epsilon;
}

Constness() no_ast
{
    "const";
    "final";
    "invariant";
}

Declarator2(ref Type type)
{
    BasicType2 prefer(DeclaratorOpt)
    { BasicType2(type); }

    BasicType2 Declarator2
    {
        BasicType2(type);
        Declarator2(type);
    }

    "(" Declarator2 ")" DeclaratorSuffixesOpt
    { Declarator2(type); }
}

Parameters(ref Type[] typelist)
{
    "(" ")";

    "(" ParameterList ")"
    { ParameterList(typelist); }
}

ParameterListOpt(ref Type[] typelist)
{
    ParameterList
    { ParameterList(typelist); }

    epsilon;
}

ParameterList(ref Type[] typelist)
{
    Parameter
    {
        Type type;
        Parameter(type);
        typelist ~= type;
    }

    Parameter "," ParameterList
    {
        Type type;
        Parameter(type);
        typelist ~= type;
        ParameterList(typelist);
    }

    Parameter "..."
    {
        Type type;
        Parameter(type);
        typelist ~= type;
    }

    "...";
}

Parameter(ref Type type)
{
    Parameter2
    { Parameter2(type); }

    InOut Parameter2
    { Parameter2(type); }

    ParameterStorageClasses Parameter2
    { Parameter2(type); }

    InOut ParameterStorageClasses Parameter2
    { Parameter2(type); }
}

Parameter2(ref Type type)
{
    BasicType DeclaratorOpt
    {
        BasicType(type);
        string ident;
        DeclaratorOpt(type, ident);
    }

    BasicType DeclaratorOpt "=" AssignExpression
    {
        BasicType(type);
        string ident;
        DeclaratorOpt(type, ident);
    }
}

ParameterStorageClasses() no_ast
{
    ParameterStorageClasses ParameterStorageClass;
    ParameterStorageClass;
}

ParameterStorageClass() no_ast
{
    "const";
    "invariant";
    "final";
    "scope";
    "static";
}

InOut() no_ast
{
    "inout";
    "in";
    "out";
    "ref";
    "lazy";
}

Initializer() no_ast
{
    "void";
    NonVoidInitializer;
}

NonVoidInitializer() no_ast
{
    AssignExpression;
    ArrayInitializer;
    StructInitializer;
}

ArrayInitializer() no_ast
{
    "[" "]";
    "[" ArrayStructMemberInitializers "]";
}

StructInitializer() no_ast
{
    "{" "}";
    "{" ArrayStructMemberInitializers "}";
}

ArrayStructMemberInitializers() no_ast
{
    ArrayStructMemberInitializers !(sync) "," ArrayStructMemberInitializer;
    ArrayStructMemberInitializers !(sync) ",";
    ArrayStructMemberInitializer;
}

ArrayStructMemberInitializer() no_ast
{
    NonVoidInitializer;
    Identifier ":" NonVoidInitializer;
}


/**************************************************************************************************
    Enums
**************************************************************************************************/
EnumDeclaration(ScopeSymbol parent, SymbolAttribute attrs)
{
    "enum" Identifier EnumBaseTypeOpt EnumBody
    {
        string ident;
        Identifier(ident);

        EnumBody(parent);
    }

    "enum" EnumBaseTypeOpt EnumBody
    { EnumBody(parent); }
}

EnumBaseTypeOpt() no_ast
{
    ":" TypeNT;
    epsilon;
}

EnumBody(ScopeSymbol parent)
{
    ";";
    "{" EnumMembers "}"
    { EnumMembers(parent); }
}

EnumMembers(ScopeSymbol parent)
{
    EnumMembers "," EnumMember
    {
        EnumMembers(parent);
        string ident;
        EnumMember(ident);
    }

    EnumMembers ","
    { EnumMembers(parent); }

    EnumMember
    {
        string ident;
        EnumMember(ident);
    }
}

EnumMember(out string ident)
{
    Identifier EnumInitializerOpt
    { Identifier(ident); }
}

EnumInitializerOpt() no_ast
{
    "=" AssignExpression;
    epsilon;
}
