/*  SEATD - Semantics Aware Tools for D
 *  Copyright (c) 2007-2008 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0, see license.txt
 */

ConditionalStatement() no_ast
{
    Condition Statement "else" Statement=S2;
    Condition Statement;
}

Statement(ScopeSymbol parent)
{
    NonEmptyStatement
    pass(symStmt) { NonEmptyStatement(parent); }

    BlockStatement
    pass(symStmt) { BlockStatement(parent); }
}

StatementList(ScopeSymbol parent)
{
    StatementList !(sync) Statement
    pass(symStmt) { StatementList(parent); Statement(parent); }

    Statement
    pass(symStmt) { Statement(parent); }
}

NoScopeNonEmptyStatement(ScopeSymbol parent)
{
    NonEmptyStatement
    pass(symStmt) { NonEmptyStatement(parent); }

    BlockStatement
    pass(symStmt) { BlockStatement(parent); }
}

NoScopeStatement(ScopeSymbol parent)
{
    NonEmptyStatement
    pass(symStmt) { NonEmptyStatement(parent); }

    BlockStatement
    pass(symStmt) { BlockStatement(parent); }
}

NonEmptyStatement(ScopeSymbol parent)
{
    DeclDef
    pass(symStmt) {
        SymbolAttribute attrs;
        DeclDef_node._S_DeclDef_default(parent, attrs);
    }

    NonEmptyNoDeclStatement
    pass(symStmt) { /* NonEmptyNoDeclStatement(info, parentDecl); */ }
}

NonEmptyNoDeclStatement(ScopeSymbol parent)
{
    LabeledStatement;
    ExpressionStatement;

    IfStatement
    pass(symStmt) { IfStatement(parent); }

    ConditionalStatement;

    WhileStatement
    pass(symStmt) { WhileStatement(parent); }

    DoStatement
    pass(symStmt) { DoStatement(parent); }

    ForStatement
    pass(symStmt) { ForStatement(parent); }

    ForeachStatement
    pass(symStmt) { ForeachStatement(parent); }

    ForeachRangeStatement
    pass(symStmt) { ForeachRangeStatement(parent); }

    SwitchStatement
    pass(symStmt) { SwitchStatement(parent); }

    CaseStatement;
    DefaultStatement;
    ContinueStatement;
    BreakStatement;
    ReturnStatement;
    GotoStatement;

    WithStatement
    pass(symStmt) { WithStatement(parent); }

    SynchronizedStatement;
    TryStatement;
    ScopeGuardStatement;
    ThrowStatement;
    VolatileStatement;
    AsmStatement;
    PragmaStatement;
}

ScopeStatement(ScopeSymbol parent)
{
    NonEmptyStatement
    pass(symStmt) {
        // TODO: a block isn't a symbol - create class Scope? does ScopeSymbol inherit it?
        auto sc = new ScopeSymbol("__block", Location(parent.findModule, _ST_line_number, _ST_column_number));
        NonEmptyStatement(sc);
    }

    BlockStatement
    pass(symStmt) {
        // TODO: a block isn't a symbol - create class Scope? does ScopeSymbol inherit it?
        auto sc = new ScopeSymbol("__block", Location(parent.findModule, _ST_line_number, _ST_column_number));
        BlockStatement(sc);
    }
}

NoDeclScopeStatement() no_ast
{
    NonEmptyNoDeclStatement;
    BlockStatement;
}

LabeledStatement() no_ast
{
    Identifier ":" NoScopeStatement;
}

BlockStatement(ScopeSymbol parent)
{
    "{" "}";

    "{" StatementList "}"
    pass(symStmt) {
        StatementList(parent);
    }
}

ExpressionStatement() no_ast
{
    Expression ";";
}

IfStatement(ScopeSymbol parent)
{
	"if" "(" IfCondition ")" !(sync) ScopeStatement
    pass(symStmt) { ScopeStatement(parent); }

	"if" "(" IfCondition ")" !(sync) ScopeStatement "else" ScopeStatement=S2
    pass(symStmt) { ScopeStatement(parent); S2(parent); }
}

IfCondition() no_ast
{
	Expression;
	"auto" Identifier "=" Expression;
	BasicType Declarator "=" Expression;
}

WhileStatement(ScopeSymbol parent)
{
    "while" "(" Expression ")" !(sync) ScopeStatement
    pass(symStmt) { ScopeStatement(parent); }
}

DoStatement(ScopeSymbol parent)
{
    "do" ScopeStatement "while" "(" Expression ")"
    pass(symStmt) { ScopeStatement(parent); }
}

ForStatement(ScopeSymbol parent)
{
	"for" "(" NoScopeNonEmptyStatement ExpressionOpt ";" ExpressionOpt=EL2 ")" !(sync) ScopeStatement
    pass(symStmt) { ScopeStatement(parent); }
}

ForeachStatement(ScopeSymbol parent)
{
    Foreach "(" ForeachTypeList ";" Expression ")" !(sync) ScopeStatement
    pass(symStmt) { ScopeStatement(parent); }
}

Foreach() no_ast
{
    "foreach";
    "foreach_reverse";
}

ForeachTypeList() no_ast
{
    ForeachTypeList !(sync) "," ForeachType;
    ForeachType ;
}

ForeachType() no_ast
{
    "inout" TypeNT Identifier;
    "ref" TypeNT Identifier;
    TypeNT Identifier;
    "inout" Identifier;
    "ref" Identifier;
    Identifier;
}

ForeachRangeStatement(ScopeSymbol parent)
{
    Foreach "(" ForeachType ";" AssignExpression ".." AssignExpression ")" !(sync) ScopeStatement
    pass(symStmt) { ScopeStatement(parent); }
}

SwitchStatement(ScopeSymbol parent)
{
	"switch" "(" Expression ")" !(sync) BlockStatement
    pass(symStmt) { BlockStatement(parent); }
}

CaseStatement() no_ast
{
	"case" Expression ":";
}

DefaultStatement() no_ast
{
	"default" ":";
}

ContinueStatement() no_ast
{
    "continue" ";";
    "continue" Identifier ";";
}

BreakStatement() no_ast
{
    "break" ";";
    "break" Identifier ";";
}

ReturnStatement() no_ast
{
    "return" ";";
    "return" Expression ";";
}

GotoStatement() no_ast
{
    "goto" Identifier ";";
    "goto" "default" ";";
    "goto" "case" ";";
    "goto" "case" Expression ";";
}

WithStatement(ScopeSymbol parent)
{
    "with" "(" Expression ")" !(sync) ScopeStatement
    pass(symStmt) { ScopeStatement(parent); }

    "with" "(" TemplateInstance ")" !(sync) ScopeStatement
    pass(symStmt) { ScopeStatement(parent); }
}

SynchronizedStatement() no_ast
{
    "synchronized" >[^"("] NoDeclScopeStatement;
    "synchronized" "(" Expression ")" !(sync) ScopeStatement;
}

TryStatement() no_ast
{
    "try" ScopeStatement Catches
    pass(symStmt) { ScopeStatement(parent); }

    "try" ScopeStatement Catches FinallyStatement
    pass(symStmt) { ScopeStatement(parent); }

    "try" ScopeStatement FinallyStatement
    pass(symStmt) { ScopeStatement(parent); }
}

Catches() no_ast
{
    LastCatch;
    Catch Catches;
    Catch;
}

LastCatch() no_ast
{
    "catch" NoScopeNonEmptyStatement;
}

Catch() no_ast
{
    "catch" "(" Parameter ")" !(sync) NoScopeNonEmptyStatement;
}

FinallyStatement() no_ast
{
    "finally" NoScopeNonEmptyStatement;
}

ThrowStatement() no_ast
{
    "throw" Expression ";";
}

ScopeGuardStatement() no_ast
{
    "scope" "(" Identifier ")" !(sync) Statement;
}

VolatileStatement() no_ast
{
    "volatile" Statement;
    "volatile" ";";
}

AsmStatement() no_ast
{
    "asm" "{" "}";
    "asm" "{" AsmInstructionList "}";
}

AsmInstructionList() no_ast
{
    AsmInstructionList AsmInstruction;
    AsmInstruction;
}

AsmInstruction() no_ast
{
    [^ "{" "}" ];
}

PragmaStatement() no_ast
{
    Pragma NoScopeStatement;
}
