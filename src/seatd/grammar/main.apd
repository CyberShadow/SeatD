/*  SEATD - Semantics Aware Tools for D
 *  Copyright (c) 2007 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0, see license.txt
 */

APDLexemes
{
    regexp("#")
    {
        uint i = findEOL(input);
        i += skipEOL(input);
        input = input[i .. $];
        goto readSymbol;
    }

    "q\""
    {
        char open, close;
        switch ( input[lookahead.length] )
        {
            case '[':
                open = '['; close = ']';
                goto nestedDel;
            case '(':
                open = '('; close = ')';
                goto nestedDel;
            case '<':
                open = '<'; close = '>';
                goto nestedDel;
            case '{':
                open = '{'; close = '}';
            nestedDel:
                int counter = 1;
                auto tmp = input[2+1 .. $];
                foreach ( i, c; tmp )
                {
                    if ( c == '\n' || c == '\r' && (tmp.length < i+1 || tmp[i+1] != '\n') ) {
                        ++line;
                        column = 0;
                    }
                    else if ( c == 0 || c == 0x1a )
                        throw new ParserException(line, column, filename, "Missing string delimiter");
                    else if ( c == open )
                        ++counter;
                    else if ( c == close && --counter == 0 )
                    {
                        if ( tmp.length < i+2 || tmp[i+1] != '"' )
                            throw new ParserException(line, column, filename, "Missing double quote after string delimiter");
                        lookahead = lookahead[0 .. $+i+3];
                        lookahead_ws = lookahead_ws[0 .. $+i+3];
                        break;
                    }
                    ++column;
                }
                throw new ParserException(line, column, filename, "Missing string delimiter");
            default:
                string delimiter = input[2 .. $];
                // TODO: newline only needed if delimiter is an identifier
                auto i = findEOL(delimiter);
                if ( i == 0 )
                    throw new ParserException(line, column, filename, "Missing string delimiter");
                delimiter = delimiter[0 .. i];
                i += 2; // adjust for lookahead

                i += skipEOL(input[i .. $]);
                ++line;

                while ( input.length > 0 )
                {
                    i += findEOL(input[i .. $]);
                    i += skipEOL(input[i .. $]);
                    ++line;

                    if ( input.length < i+delimiter.length )
                        throw new ParserException(line, 0, filename, "Missing string delimiter");
                    if ( input[i .. i+delimiter.length] == delimiter )
                    {
                        if ( input[i+delimiter.length] != '"' )
                            throw new ParserException(line, delimiter.length+1, filename, "Missing double quote after string delimiter");
                        column = delimiter.length+1;
                        lookahead = lookahead[0 .. $+i-2+delimiter.length+1];
                        lookahead_ws = lookahead_ws[0 .. $+i-2+delimiter.length+1];
                        break;
                    }
                }
                throw new ParserException(line, column, filename, "Missing string delimiter");
        }

    }
}

APDGlobal
{
/*  SEATD - Semantics Aware Tools for D
 *  Copyright (c) 2007 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0, see license.txt
 */
module seatd.parser;

import seatd.symbol;
import seatd.type;
import container;
import common;

import tango.io.FilePath;

alias _ST_DeclDef DeclDefNode;

uint findEOL(string str)
{
    uint i;
    while ( i < str.length )
    {
        switch ( str[i] )
        {
            case '\r':
            case '\n':
            case 0:
            case 0x1a:
                return i;
            case '_':
                if ( str.length > i+6 && str[i+1 .. i+7] == "_EOF__" )
                    return i;
                break;
            default:
                break;
        }
        ++i;
    }
    return i;
}

uint skipEOL(string str)
{
    if ( str.length == 0 )
        return 0;
    switch ( str[0] )
    {
        case '\r':
            if ( str.length > 1 && str[1] == '\n' )
                return 2;
        case '\n':
            return 1;
        case '_':
            if ( str.length < 7 || str[1 .. 7] != "_EOF__" )
                break;
            return 7;
        case 0:
        case 0x1a:
            return 1;
        default:
            break;
    }
    return 0;
}

}


/**************************************************************************************************
    Grammar imports
**************************************************************************************************/
import class_struct_iface;
import statements;
import declarations;
import templates;
import expressions;
import lexical;


/**************************************************************************************************
    Whitespace
**************************************************************************************************/
Whitespace
{
    Whitespace WhitespaceFlat;
    WhitespaceFlat;
}

WhitespaceFlat
{
    regexp("/\\*([^\\*]|\\*>[^/])*\\*/");
    regexp("//[^\\n\\r]*");
    regexp("[\\n\\r\\t ]+");
    "/+" WhitespaceNesteds "+/";
}

WhitespaceNesteds
{
    WhitespaceNesteds WhitespaceNested;
    WhitespaceNested;
}

WhitespaceNested
{
    regexp("[^/\\+\\*\\n\\r\\t ]+");
    "+";
    "*";
    "/";
    WhitespaceFlat;
}

/**************************************************************************************************
    Modules
**************************************************************************************************/
seatdModule(Package root, Module mod)
{
    ModuleDeclarationOpt DeclDefsOpt
    {
        assert(mod !is null);
        ModuleDeclarationOpt(root, this, mod);
        SymbolAttribute attrs;
        DeclDefsOpt(mod, attrs);
    }
}

ModuleDeclarationOpt(Package root, SyntaxTree syntax_tree, Module mod)
{
    "module" ModuleName ";"
    {
        string[] ident_list;
        ModuleName(ident_list);

        Package p = root;
        if ( ident_list.length > 1 )
        {
            foreach ( ident; ident_list[0 .. $-1] )
            {
                auto nextp = cast(Package)p.findSymbol(ident);
                if ( nextp is null ) {
                    nextp = new Package(ident);
                    p ~= nextp;
                    p = nextp;
                }
                else
                    p = nextp;
            }
        }
        mod.syntax_tree_ = syntax_tree;
        mod.identifier_ = ident_list[$-1];
        mod.location_.line = _ST_line_number;
        mod.location_.column = _ST_column_number;
        p ~= mod;
    }

    epsilon
    {
        mod.syntax_tree_ = syntax_tree;
        root ~= mod;
    }
}

ModuleName(ref string[] ident_list)
{
    APDLocal {
        string tmp;
    }

    ModuleName "." Identifier
    {
        ModuleName(ident_list);
        Identifier(tmp);
        ident_list ~= tmp;
    }

    Identifier
    {
        Identifier(tmp);
        ident_list ~= tmp;
    }
}

DeclDefsOpt(ScopeSymbol parent, ref SymbolAttribute attrs)
{
    DeclDefsOpt !(sync) DeclDef
    {
        DeclDefsOpt(parent, attrs);
        DeclDef(parent, attrs);
    }

    epsilon;
}

DeclDef(ScopeSymbol parent, ref SymbolAttribute attrs, DeclDefNode decl_def_node=null)
{
    APDNode
    {
        string getDDocString()
        {
            // find first Terminal in the subtree by searching depth-first, left-to-right
            Stack!(SyntaxTree)  stack;
            stack ~= this;
            while ( !stack.empty )
            {
                auto n = stack.pop;
                if ( n.isTerminal )
                    return n._ST_match_ws;
                foreach_reverse ( c; n._ST_children )
                    stack ~= c;
            }
            return null;
        }
    }

    StaticAssert;

    ConditionalDeclaration
    { ConditionalDeclaration(parent, attrs); }

    Declaration
    { Declaration(parent, attrs, decl_def_node is null? this : decl_def_node); }

    ImportDeclaration
    { ImportDeclaration(parent, attrs); }

    AttributeSpecifier
    { AttributeSpecifier(parent, attrs, decl_def_node is null? this : decl_def_node); }

    EnumDeclaration
    { EnumDeclaration(parent, attrs); }

    TemplateMixin;

    TemplateDeclaration
    { TemplateDeclaration(parent, attrs); }

    FunctionTemplateDeclaration
    { FunctionTemplateDeclaration(parent, attrs, decl_def_node is null? this : decl_def_node); }

    ClassTemplateDeclaration
    { ClassTemplateDeclaration(parent, attrs, decl_def_node is null? this : decl_def_node); }

    InterfaceTemplateDeclaration
    { InterfaceTemplateDeclaration(parent, attrs, decl_def_node is null? this : decl_def_node); }

    StructTemplateDeclaration
    { StructTemplateDeclaration(parent, attrs, decl_def_node is null? this : decl_def_node); }

    ClassDeclaration
    { ClassDeclaration(parent, attrs, decl_def_node is null? this : decl_def_node); }

    InterfaceDeclaration
    { InterfaceDeclaration(parent, attrs, decl_def_node is null? this : decl_def_node); }

    AggregateDeclaration
    { AggregateDeclaration(parent, attrs, decl_def_node is null? this : decl_def_node); }

    Constructor;
    Destructor;
    Invariant;
    UnitTest;
    StaticConstructor;
    StaticDestructor;
    DebugSpecification;
    VersionSpecification;
    MixinDeclaration;
    ";";
}


/**************************************************************************************************
    Conditional compilation
**************************************************************************************************/
ConditionalDeclaration(ScopeSymbol parent, SymbolAttribute attrs)
{
    Condition ":";

    Condition
    DeclarationBlock
    { DeclarationBlock(parent, attrs); }

    Condition
    DeclarationBlock
    "else" DeclarationBlock=ElseBlock
    {
        DeclarationBlock(parent, attrs);
        ElseBlock(parent, attrs);
    }
}

Condition() no_ast
{
    VersionCondition;
    DebugCondition;
    StaticIfCondition;
}

VersionCondition() no_ast
{
    "version" "(" Integer ")";
    "version" "(" Identifier ")";
}

VersionSpecification() no_ast
{
    "version" "=" Integer ";";
    "version" "=" Identifier ";";
}

DebugCondition() no_ast
{
    "debug" "(" Integer ")";
    "debug" "(" Identifier ")";
    "debug";
}

DebugSpecification() no_ast
{
    "debug" "=" Identifier ";";
    "debug" "=" Integer ";";
}

StaticIfCondition() no_ast
{
    "static" "if" "(" AssignExpression ")";
}

StaticAssert() no_ast
{
    "static" "assert" "(" AssignExpression "," AssignExpression=AssignEx2 ")" ";";
    "static" "assert" "(" AssignExpression ")" ";";
}


/**************************************************************************************************
    Import Declaration
**************************************************************************************************/
ImportDeclaration(ScopeSymbol parent, SymbolAttribute attrs)
{
    "import" ImportList ";"
    {
        ImportList(parent, attrs);
    }
}

ImportList(ScopeSymbol parent, SymbolAttribute attrs)
{
    ImportList "," Import
    {
        ImportList(parent, attrs);
        Import(parent, attrs);
    }

    Import
    { Import(parent, attrs); }
}

Import(ScopeSymbol parent, SymbolAttribute attrs)
{
    APDLocal {
        string[] ident_list;
    }

    Identifier=ModuleAliasIdentifier "=" ModuleName ImportBindListOpt
    {
        ModuleName(ident_list);
        parent ~= new Import(ident_list);
    }

    ModuleName ImportBindListOpt
    {
        ModuleName(ident_list);
        parent ~= new Import(ident_list);
    }
}

ImportBindListOpt() no_ast
{
    ":" ImportBindList;
    epsilon;
}

ImportBindList() no_ast
{
    ImportBindList "," ImportBind;
    ImportBind;
}

ImportBind() no_ast
{
    Identifier "=" Identifier=Id2;
    Identifier;
}

/**************************************************************************************************
    Attributes
**************************************************************************************************/
AttributeSpecifier(ScopeSymbol parent, ref SymbolAttribute attr, DeclDefNode decl_def_node)
{
    Attributes ":"
    { Attributes(attr); }

    Attributes DeclarationBlock
    {
        Attributes(attr);
        DeclarationBlock(parent, attr, decl_def_node);
    }
}

Attribute(ref SymbolAttribute attr)
{
    "synchronized"      { attr |= atSynchronized; }
    "deprecated"        { attr |= atDeprecated; }
    "private"           { attr |= atPrivate; }
    "package"           { attr |= atPackage; }
    "protected"         { attr |= atProtected; }
    "public"            { attr |= atPublic; }
    "export"            { attr |= atExport; }
    "static"            { attr |= atStatic; }
    "override"          { attr |= atOverride; }
    "abstract"          { attr |= atAbstract; }
    "auto"              { attr |= atAuto; }
    "scope"             { attr |= atScope; }
    Constness prefer;
    LinkageAttribute;
    AlignAttribute;
    Pragma;
}

Attributes(ref SymbolAttribute attr)
{
    Attributes Attribute
    { Attributes(attr); Attribute(attr); }

    Attribute deny(Attributes)
    { Attribute(attr); }
}

DeclarationBlock(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node=null)
{
    "{" DeclDefsOpt "}"
    { DeclDefsOpt(parent, attrs); }

    DeclDef
    { DeclDef(parent, attrs, decl_def_node); }
}

LinkageAttribute()
{
	"extern" "(" Identifier ")";
	"extern" "(" Identifier "++" ")";
	"extern";
}

AlignAttribute() no_ast
{
	"align" "(" Integer ")";
	"align";
}

Pragma() no_ast
{
    "pragma" "(" Identifier "," Expression ")";
    "pragma" "(" Identifier ")";
}


/**************************************************************************************************
    Functions
**************************************************************************************************/
FunctionBody(FunctionDeclaration funcdecl)
{
    InStatement OutStatement BodyStatement
    { BodyStatement(funcdecl); }

    OutStatement InStatement BodyStatement
    { BodyStatement(funcdecl); }

    InStatement BodyStatement
    { BodyStatement(funcdecl); }

    OutStatement BodyStatement
    { BodyStatement(funcdecl); }

    BodyStatement
    { BodyStatement(funcdecl); }
}

FunctionBodyOpt(FunctionDeclaration funcdecl)
{
    FunctionBody
    { FunctionBody(funcdecl); }

    ";";
}

InStatement() no_ast
{
    "in" BlockStatement;
}

OutStatement() no_ast
{
    "out" "(" Identifier ")" BlockStatement;
    "out" BlockStatement;
}

BodyStatement(FunctionDeclaration funcdecl)
{
    "body" BlockStatement
    {
        // TODO: a block isn't a symbol - create class Scope? does ScopeSymbol inherit it?
        auto blockscope = new ScopeSymbol(null, Location(null, _ST_line_number, _ST_column_number));
        BlockStatement(blockscope);
    }

    BlockStatement
    {
        // TODO: a block isn't a symbol - create class Scope? does ScopeSymbol inherit it?
        auto blockscope = new ScopeSymbol(null, Location(null, _ST_line_number, _ST_column_number));
        BlockStatement(blockscope);
    }
}
