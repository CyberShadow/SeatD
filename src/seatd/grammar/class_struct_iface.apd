/*  SEATD - Semantics Aware Tools for D
 *  Copyright (c) 2007-2008 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0, see license.txt
 */

/**************************************************************************************************
    Class Declaration
**************************************************************************************************/
ClassDeclaration(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node)
{
    "class" Identifier BaseClassListOpt ClassBody
    {
        string name;
        Identifier(name);

        BaseDeclaration[] base_list;
        BaseClassListOpt(base_list);
        auto classdecl = new ClassDeclaration(
            name, base_list,
            Location(parent.findModule, _ST_line_number, _ST_column_number),
            decl_def_node
        );
        parent ~= classdecl;

        SymbolAttribute body_attrs;
        ClassBody(classdecl, body_attrs);
    }
}

BaseClassListOpt(out BaseDeclaration[] base_list)
{
    ":" BaseClassList
    { BaseClassList(); base_list = BaseClassList_node.base_list; }

    epsilon;
}

BaseClassList()
{
    APDNode {
        BaseDeclaration[]  base_list;
    }

    APDLocal {
        string[] idlist;
    }

    BaseClassList "," SuperClass
    {
        BaseClassList();
        BaseDeclaration base;
        SuperClass(base);
        base_list ~= base;
    }

    SuperClass
    {
        BaseDeclaration base;
        SuperClass(base);
        base_list ~= base;
    }
}

SuperClass(out BaseDeclaration base)
{
    ProtectionNT IdentifierList
    {
        ProtectionNT(base.prot);
        IdentifierList(base.id_list);
    }

    IdentifierList
    { IdentifierList(base.id_list); }
}

ProtectionNT(out Protection prot)
{
    "private"
    { prot = Protection.Pprivate; }

    "package"
    { prot = Protection.Ppackage; }

    "public"
    { prot = Protection.Ppublic; }

    "export"
    { prot = Protection.Pexport; }
}

ClassBody(ScopeSymbol parent, SymbolAttribute attrs)
{
    "{" "}";

    "{" ClassBodyDeclarations "}"
    { ClassBodyDeclarations(parent, attrs); }
}

ClassBodyDeclarations(ScopeSymbol parent, ref SymbolAttribute attrs)
{
    ClassBodyDeclarations !(sync) ClassBodyDeclaration
    {
        ClassBodyDeclarations(parent, attrs);
        ClassBodyDeclaration(parent, attrs);
    }

    ClassBodyDeclaration
    { ClassBodyDeclaration(parent, attrs); }
}

ClassBodyDeclaration(ScopeSymbol parent, ref SymbolAttribute attrs)
{
    DeclDef
    { DeclDef(parent, attrs); }

    ClassAllocator;
    ClassDeallocator;
}

Constructor()
{
    "this" Parameters FunctionBodyOpt;
}

Destructor()
{
    "~" "this" "(" ")" FunctionBodyOpt;
}

StaticConstructor() no_ast
{
    "static" "this" "(" ")" FunctionBody;
}

StaticDestructor()
{
    "static" "~" "this" "(" ")" FunctionBody;
}

Invariant()
{
    "invariant" BlockStatement;
    "invariant" "(" ")" BlockStatement;
}

UnitTest()
{
    "unittest" FunctionBody;
}

ClassAllocator()
{
    "new" Parameters FunctionBody;
}

ClassDeallocator() no_ast
{
    "delete" Parameters FunctionBody;
}

/**************************************************************************************************
    Interfaces
**************************************************************************************************/
InterfaceDeclaration(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node)
{
    "interface" Identifier SuperInterfaceListOpt InterfaceBody
    {
        string name;
        Identifier(name);

        auto ifacedecl = new InterfaceDeclaration(
            name,
            Location(parent.findModule, _ST_line_number, _ST_column_number),
            decl_def_node
        );
        parent ~= ifacedecl;
        SymbolAttribute body_attrs;
        InterfaceBody(ifacedecl, body_attrs);
    }
}

SuperInterfaceListOpt() no_ast
{
    ":" SuperInterfaces;
    epsilon;
}

SuperInterfaces() no_ast
{
    SuperInterfaces "," SuperInterface;
    SuperInterface;
}

SuperInterface() no_ast
{
    ProtectionNT IdentifierList;
    IdentifierList;
}

InterfaceBody(ScopeSymbol parent, SymbolAttribute attrs)
{
    "{" DeclDefsOpt "}"
    { DeclDefsOpt(parent, attrs); }
}

/**************************************************************************************************
    Aggregates structs/unions
**************************************************************************************************/
AggregateDeclaration(ScopeSymbol parent, SymbolAttribute attrs, DeclDefNode decl_def_node)
{
    Tag IdentifierOpt StructBody
    {
        string tag;
        Tag(tag);
        string name;
        IdentifierOpt(name);

        auto structdecl = new StructDeclaration(
            name,
            Location(parent.findModule, _ST_line_number, _ST_column_number),
            decl_def_node
        );
        parent ~= structdecl;
        SymbolAttribute body_attrs;
        StructBody(structdecl, body_attrs);
    }

    Tag IdentifierOpt ";"
    {
        string tag;
        Tag(tag);
        string name;
        IdentifierOpt(name);
    }
}

Tag(out string value) prefer(regexp("[a-zA-Z_][_a-zA-Z0-9]*"))
{
    "struct" { value = "struct"; }
    "union" { value = "union"; }
}

StructBody(ScopeSymbol parent, SymbolAttribute attrs)
{
    "{" "}";

    "{" "}" ";";

    "{" StructBodyDeclarations "}"
    { StructBodyDeclarations(parent, attrs); }

    "{" StructBodyDeclarations "}" ";"
    { StructBodyDeclarations(parent, attrs); }
}

StructBodyDeclarations(ScopeSymbol parent, SymbolAttribute attrs)
{
    StructBodyDeclarations StructBodyDeclaration
    {
        StructBodyDeclarations(parent, attrs);
        StructBodyDeclaration(parent, attrs);
    }

    StructBodyDeclaration
    { StructBodyDeclaration(parent, attrs); }
}

StructBodyDeclaration(ScopeSymbol parent, ref SymbolAttribute attrs)
{
    DeclDef
    { DeclDef(parent, attrs); }

    StructAllocator;
    StructDeallocator;
}

StructAllocator() no_ast
{
    ClassAllocator;
}

StructDeallocator() no_ast
{
    ClassDeallocator;
}
