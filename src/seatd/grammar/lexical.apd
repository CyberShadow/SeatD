/*  SEATD - Semantics Aware Tools for D
 *  Copyright (c) 2007 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0, see license.txt
 */

/**************************************************************************************************
    Strings and characters
**************************************************************************************************/
CharacterLiteral() no_ast
{
    regexp("'(([^'\\\\]|(\\\\(['\"\\?\\\\abfnrtv]|([0-7_]{1,3})|(x[0-9a-fA-F]{2})|(u[0-9a-fA-F]{4})|(U[0-9a-fA-F]{8})))))'");
}

StringLiteral() no_ast
{
    regexp("\"(([^\"\\\\]*(\\\\(['\"\\?\\\\abfnrtv]|([0-7_]{1,3})|(x[0-9a-fA-F]{2})|(u[0-9a-fA-F]{4})|(U[0-9a-fA-F]{8})))?)*)\"[cdw]?");
    regexp("r\"[^\"]*\"[cdw]?");
    regexp("`[^`]*`[cdw]?");
    regexp("x\"[0-9a-fA-F_\\n\\r\\t ]*\"[cdw]?");
    regexp("\\\\(['\"\\?\\\\abfnrtv]|([0-7_]{1,3})|(x[0-9a-fA-F]{2})|(u[0-9a-fA-F]{4})|(U[0-9a-fA-F]{8}))");
    "q\"";
    "q{" Tokens "}";
    "__FILE__";
    "__DATE__";
    "__TIME__";
    "__TIMESTAMP__";
    "__VENDOR__";
}

Tokens() no_ast
{
    Tokens Token;
    Token;
}

Token() no_ast
{
    [^ "{" "}" ];
    "{" Tokens "}";
}

/**************************************************************************************************
    Integers
**************************************************************************************************/
Integer(out string val)
{
    regexp("0([xX][0-9a-fA-F_]*|[bB][01_]*|[0-7_]*)(L|[uU]|L[uU]|[uU]L)?")
    { val = _ST_match; }

    regexp("[1-9][0-9_]*(L|[uU]|L[uU]|[uU]L)?")
    { val = _ST_match; }

    "__LINE__";
    "__VERSION__";
}

/**************************************************************************************************
    Floats
**************************************************************************************************/
Float() no_ast
{
    regexp("(([0-9_]*\\.[0-9][0-9_]*([eE][\\+\\-]?[0-9][0-9_]*)?)|([0-9][0-9_]*[eE][\\+\\-]?[0-9][0-9_]*))([fFLi]|[fFL]i)?");
    regexp("[0-9][0-9_]*\\.?([fFLi]|[fFL]i)");
    regexp("[0-9][0-9_]*\\.>[^\\.]");
    regexp("0[xX][0-9a-fA-F_]*\\.?[0-9a-fA-F_]+[pP][\\+\\-]?[0-9_]+([fFLi]|[fFL]i)?");
    regexp("(0([xX][0-9a-fA-F_]*|[bB][01_]*|[0-7_]*)|([1-9][0-9_]*))[fFL]?i");
}

/**************************************************************************************************
    Identifiers
**************************************************************************************************/
Identifier(out string id)
{
    regexp("[a-zA-Z_][_a-zA-Z0-9]*")
    { id = _ST_match; }
}

IdentifierOpt(out string id)
{
    Identifier
    { Identifier(id); }

    epsilon;
}
